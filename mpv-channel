#!/bin/bash

# Ensure mpv is installed
if ! command -v mpv > /dev/null 2>&1; then
    echo "mpv is not installed! Please install it to use this tool."
    exit 1
fi

# Determine XDG-compliant config path
if [ -z "$XDG_CONFIG_HOME" ]; then
    XDG_CONFIG_HOME="$HOME/.config"
fi

# Ensure config directory exists
MPV_CHANNEL_SELECTOR_CONFIG_DIR="$XDG_CONFIG_HOME/mpv-channel-selector"
if [ ! -d "$DIRECTORY" ]; then
    mkdir -p "$MPV_CHANNEL_SELECTOR_CONFIG_DIR"
fi
echo "Using config located at ${MPV_CHANNEL_SELECTOR_CONFIG_DIR}"

# Ensure HDHomeRune IP address file exists in config directory
HDHOMERUN_IP_PATH="$MPV_CHANNEL_SELECTOR_CONFIG_DIR/hdhomerun-ip"
if [ -f "$HDHOMERUN_IP_PATH" ]; then
    read -r HDHOMERUN_IP < "$HDHOMERUN_IP_PATH"
fi

# If there is no HDHomeRun IP address file, prompt the user for the IP and save
# it into said file.
if [ -z "${HDHOMERUN_IP}" ]; then
    read -p "Enter the IP address of the HDHomeRun: " HDHOMERUN_IP
    echo "${HDHOMERUN_IP}" >> $HDHOMERUN_IP_PATH
fi
HDHOMERUN_PORT="5004"
echo "Using HDHomeRun IP/Port: ${HDHOMERUN_IP}:${HDHOMERUN_PORT}"

# Ensure channel list file exists in config directory
CHANNEL_LIST_PATH="$MPV_CHANNEL_SELECTOR_CONFIG_DIR/channel-list"
if [ ! -f "$CHANNEL_LIST_PATH" ]; then
    touch "$CHANNEL_LIST_PATH"
fi

# Define an array to store the alias of each channel.
CHANNEL_NAMES=()

# Define an array to store the command associated with opening each channel.
COMMANDS=()

# Display all channel names. Save the command associated with each channel in
# the commands array.
echo ""
echo "Channel list:"
OPTION_NUMBER=1
LAST_CHANNEL_OPTION=$OPTION_NUMBER
while IFS='=' read -r CHANNEL_NAME COMMAND
do
    echo "$OPTION_NUMBER.) $CHANNEL_NAME"
    COMMANDS+=("$COMMAND")
    CHANNEL_NAMES+=("$CHANNEL_NAME")
    ((OPTION_NUMBER+=1))

    # Ensure that the last channel option is logged so that we know whether
    # user selection is invalid.
    LAST_CHANNEL_OPTION=$OPTION_NUMBER
done < $CHANNEL_LIST_PATH

echo ""
echo "Additional options:"
# Add custom option to add a new channel.
ADD_CHANNEL_OPTION=$OPTION_NUMBER
echo "$ADD_CHANNEL_OPTION.) Add new channel"
((OPTION_NUMBER+=1))

# Add custom option to reset the config files.
REMOVE_CHANNEL_OPTION=$OPTION_NUMBER
echo "$REMOVE_CHANNEL_OPTION.) Remove channel"
((OPTION_NUMBER+=1))

# Add custom option to reset the config files.
RESET_CONFIGS_OPTION=$OPTION_NUMBER
echo "$RESET_CONFIGS_OPTION.) Reset configs"

# Get user selection
echo ""
read -p "Select a channel or option: " USER_INPUT

# Handle user selection
if (( USER_INPUT == ADD_CHANNEL_OPTION )); then
    echo "Creating new channel entry..."
    read -p "Enter an alias for the channel: " USER_CHANNEL_ALIAS
    read -p "Enter a channel number: " USER_CHANNEL_NUM

    # Store the entry in the config file.
    echo "${USER_CHANNEL_ALIAS}=mpv http://${HDHOMERUN_IP}:${HDHOMERUN_PORT}/auto/v${USER_CHANNEL_NUM} -fs --deinterlace" >> ${CHANNEL_LIST_PATH}

    # Sort the file alphabetically now that there's a new entry.
    sort -o ${CHANNEL_LIST_PATH} ${CHANNEL_LIST_PATH}
elif (( USER_INPUT == RESET_CONFIGS_OPTION )); then
    echo "You are about to remove $MPV_CHANNEL_SELECTOR_CONFIG_DIR."
    read -p "Do you want to proceed? (y/n): " RESPONSE
    if [[ "$RESPONSE" == "y" ]]; then
        rm -r $MPV_CHANNEL_SELECTOR_CONFIG_DIR
    else
        echo "Aborting..."
    fi
elif (( USER_INPUT == REMOVE_CHANNEL_OPTION )); then
    ${CHANNEL_NAMES[$USER_INPUT - 1]}
    echo "Enter the number of the channel that you would like to remove."
    read -p "Alternatively, press Ctrl-c to abort: " CHANNEL_TO_REMOVE
    sed -i "/^${CHANNEL_NAMES[$CHANNEL_TO_REMOVE - 1]}=/d" ${CHANNEL_LIST_PATH}
    echo "Channel removed!"
elif (( USER_INPUT < LAST_CHANNEL_OPTION && USER_INPUT >= 0 )); then
    echo "Opening channel..."
    ${COMMANDS[$USER_INPUT - 1]}
else
    echo "Invalid selection!"
fi
