#!/bin/bash

# Exit on error.
set -e

# Ensure dependencies are installed
if ! command -v mpv > /dev/null 2>&1; then
    echo "mpv is not installed! Please install it to use this tool."
    exit 1
fi
if ! command -v curl > /dev/null 2>&1; then
    echo "curl is not installed! Please install it to use this tool."
    exit 1
fi

while true; do
    # Clear screen, but preserve all text currently on it, unlike clear
    # command's normal behavior.
    # See: https://superuser.com/a/1667623
    height="$(tput lines 2>/dev/null)"
    if [ "$?" -eq 0 ]; then
        until [ "$height" -le 1 ]; do
            printf '\n'
            height=$((height-1))
        done
    fi
    command clear -x

    # Determine XDG-compliant config path
    if [ -z "$XDG_CONFIG_HOME" ]; then
        XDG_CONFIG_HOME="$HOME/.config"
    fi

    # Ensure config directory exists
    MPV_CHANNEL_SELECTOR_CONFIG_DIR="$XDG_CONFIG_HOME/mpv-channel-selector"
    if [ ! -d "$DIRECTORY" ]; then
        mkdir -p "$MPV_CHANNEL_SELECTOR_CONFIG_DIR"
    fi
    echo "Using config located at ${MPV_CHANNEL_SELECTOR_CONFIG_DIR}"

    # Get HDHomeRun IP address from user. Store it in a file for future use.
    HDHOMERUN_IP_PATH="$MPV_CHANNEL_SELECTOR_CONFIG_DIR/hdhomerun-ip"
    if [ ! -f "$HDHOMERUN_IP_PATH" ]; then
        read -p "Enter the IP address of the HDHomeRun: " USER_INPUT
        echo "${USER_INPUT}" > ${HDHOMERUN_IP_PATH}
    fi

    # Read the IP from the file.
    read -r HDHOMERUN_IP < "$HDHOMERUN_IP_PATH"
    HDHOMERUN_PORT="5004"
    echo "Using HDHomeRun IP/Port: ${HDHOMERUN_IP}:${HDHOMERUN_PORT}"

    # Ensure channel list file exists in config directory
    CHANNEL_LIST_PATH="$MPV_CHANNEL_SELECTOR_CONFIG_DIR/channel-list"
    if [ ! -f "$CHANNEL_LIST_PATH" ]; then
        touch "$CHANNEL_LIST_PATH"
    fi

    # Define an array to store the alias of each channel.
    CHANNEL_NAMES=()

    # Define an array to store the number of each aliased channel.
    CHANNEL_NUMBERS=()

    # Display all user-aliased channels.
    echo ""
    echo "Channel list:"
    OPTION_NUMBER=1
    LAST_CHANNEL_OPTION=$OPTION_NUMBER
    while IFS='=' read -r CHANNEL_NAME CHANNEL_NUMBER
    do
        echo "$OPTION_NUMBER.) $CHANNEL_NAME"
        CHANNEL_NUMBERS+=("$CHANNEL_NUMBER")
        CHANNEL_NAMES+=("$CHANNEL_NAME")
        ((OPTION_NUMBER+=1))

        # Ensure that the last channel option is logged so that we know whether
        # user selection is invalid.
        LAST_CHANNEL_OPTION=$OPTION_NUMBER
    done < $CHANNEL_LIST_PATH

    echo ""
    echo "Additional options:"
    # Custom option to add a new channel.
    ADD_CHANNEL_OPTION="a"
    echo "$ADD_CHANNEL_OPTION.) Add new channel"

    # Custom option to reset the config files.
    REMOVE_CHANNEL_OPTION="b"
    echo "$REMOVE_CHANNEL_OPTION.) Remove channel"

    # Custom option to remove a channel.
    RESET_HDHOMERUN_IP_OPTION="c"
    echo "$RESET_HDHOMERUN_IP_OPTION.) Reset HDHomeRun IP"

    # Custom option to reset the config files.
    REMOVE_CONFIGS_OPTION="d"
    echo "$REMOVE_CONFIGS_OPTION.) Remove ALL configs"

    # Get user selection
    echo ""
    echo "Select a channel or option "
    read -p "or press Ctrl-c to abort: " USER_INPUT

    # Handle user selection
    if [[ "$USER_INPUT" == "$ADD_CHANNEL_OPTION" ]]; then
        # A list of available channels can be curled from the HDHomeRun. You
        # just need to parse the .json. It's sloppy, but I hacked this together
        # and it works well enough. Didn't want this script to depend on jq.
        echo "Available channels are:"
        curl --silent http://${HDHOMERUN_IP}/lineup.json | grep -o '"GuideNumber":"[^"]*"' | cut -d ":" -f2 | sed 's/\"//g' | sed -z 's/\n/, /g' | sed 's/, $//'
        echo ""
        read -p "Enter a channel number: " USER_CHANNEL_NUM
        read -p "Enter an alias for the channel: " USER_CHANNEL_ALIAS

        # Store the user's entry in the config file.
        echo "${USER_CHANNEL_ALIAS}=${USER_CHANNEL_NUM}" >> ${CHANNEL_LIST_PATH}

        # Sort the file alphabetically now that there's a new entry.
        sort -n -o ${CHANNEL_LIST_PATH} ${CHANNEL_LIST_PATH}
    elif [[ "$USER_INPUT" == "$REMOVE_CONFIGS_OPTION" ]]; then
        echo "You are about to remove $MPV_CHANNEL_SELECTOR_CONFIG_DIR"
        read -p "Do you want to proceed? (y/n): " RESPONSE
        if [[ "$RESPONSE" == "y" ]]; then
            rm -r $MPV_CHANNEL_SELECTOR_CONFIG_DIR
            echo "All configs have been removed!"
        else
            echo "Aborting..."
        fi
    elif [[ "$USER_INPUT" == "$REMOVE_CHANNEL_OPTION" ]]; then
        echo "Enter the number of the channel that you would like to remove"
        read -p "or press Ctrl-c to abort: " CHANNEL_TO_REMOVE
        sed -i "/^${CHANNEL_NAMES[$CHANNEL_TO_REMOVE - 1]}=/d" ${CHANNEL_LIST_PATH}
        echo "Channel removed!"
    elif [[ "$USER_INPUT" == "$RESET_HDHOMERUN_IP_OPTION" ]]; then
        rm ${HDHOMERUN_IP_PATH}
    elif (( USER_INPUT < LAST_CHANNEL_OPTION && USER_INPUT >= 0 )); then
        echo "Opening channel..."
        mpv http://${HDHOMERUN_IP}:${HDHOMERUN_PORT}/auto/v${CHANNEL_NUMBERS[$USER_INPUT - 1]} -fs --deinterlace
        break
    else
        echo "Invalid selection!"
    fi
done
